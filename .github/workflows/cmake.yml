name: CMake

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3
               
    - name: CONFIGURE CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DRUN_TESTS=OFF -DUSE_SDL=ON -DSDL2_DIR=${{github.workspace}}/SDL2 -DSDL2_INCLUDE_DIR=${{github.workspace}}/SDL2/x86_64-w64-mingw32/include -DSDL2MAIN_LIBRARY=${{github.workspace}}/SDL2/x86_64-w64-mingw32/lib/libSDL2main.a -DSDL2_LIBRARY=${{github.workspace}}/SDL2/x86_64-w64-mingw32/lib/libSDL2.dll.a 

    - name: BUILD
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: PREPARE ARTIFACT
      run: |
           mkdir build-latest
           cp ${{github.workspace}}/build/Release/nrogue.exe build-latest/
           cp ${{github.workspace}}/*.dll build-latest/
           cp ${{github.workspace}}/config-template.txt build-latest/           
    
    - name: UPLOAD ARTIFACT
      uses: actions/upload-artifact@v3.0.0
      with:
        # Artifact name
        name: build-latest
        # Upload the whole build/ directory
        path: ${{github.workspace}}/build-latest/        
        retention-days: 1
    
    - name: DOWNLOAD ARTIFACT
      uses: actions/download-artifact@v3.0.0
      with:
        # Artifact name
        name: build-latest
        # Destination path
        path: ${{github.workspace}}/build-latest    
    
    - name: PACK LATEST BUILD
      uses: thedoctor0/zip-release@master
      with:
        type: 'zip'
        filename: 'build-latest.zip'
        directory: ${{github.workspace}}/build-latest
    
    - name: DEBUG INFO
      run: |
           ls
           ls build
           ls build-latest
           ls ../
        
    - name: GET 'build-latest' RELEASE INFO
      id: latest-release-info
      uses: cardinalby/git-get-release-action@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        releaseName: "build-latest"   
        
    - name: UPLOAD LATEST RELEASE ZIP
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.latest-release-info.outputs.upload_url }}
        asset_path: ${{github.workspace}}/build-latest.zip
        asset_name: ./build-latest-${{ github.run_number }}.zip
        asset_content_type: application/zip
        
        
        
      
    
